---
description: Script-specific quality rules enforced for files under scripts/
globs: scripts/**/*.py
alwaysApply: false
---
# Standalone Scripts: Zero Tolerance for Type Errors

The scripts in this directory, especially the ingestion and processing logic, are complex and
error-prone. You must follow the strictest possible interpretation of our Python Quality rules.

### 1. Defensive Coding (MANDATORY)

- **DEFENSIVE CODING IS MANDATORY**: Every value read from a file, dictionary, or environment
  variable MUST be treated as potentially `None` or the wrong type.
- **IMMEDIATE TYPE GUARDING**: Do not pass variables that are `str | None` or `Any` around. Check
  for `None` and use `isinstance` immediately after you receive the data to narrow its type.
- **HANDLE DICTIONARY MISSES**: When using `.get()` on a dictionary, always handle the case where
  the key is missing and the result is `None`.
- **ARITHMETIC SAFETY**: Before performing any math (`+`, `/`, etc.), ensure both operands are
  numbers and not `None`.

### 2. File and Data Processing

- **File Operations**: Always check if files exist before processing and handle file operation
  errors gracefully.
- **PDF Processing**: Handle PDF parsing errors and empty content gracefully.
- **Text Processing**: Validate text content before chunking and embedding operations.
- **Database Operations**: Ensure database connections are properly managed and operations are
  transactional where appropriate.

### 3. Script Reliability

- **IDEMPOTENCY**: All processing logic should be idempotent. Before creating database records,
  check if they already exist based on unique keys.
- **LOGGING**: Log every major step, decision, and error. Use the `logging` module with
  appropriate levels.
- **Error Handling**: Comprehensive error handling with specific exception types and meaningful
  error messages.
- **Configuration**: Use environment variables or configuration files for all configurable
  parameters.

### 4. Linting & Formatting (Ruff)

- Code MUST pass `ruff check .` using the repo `pyproject.toml`.
- Format with `ruff format .`.
- **Line length**: 100 characters (Ruff `E501`). Wrap long calls/arguments and keep
  comments/docstrings within 100 chars.
- Use double quotes and maintain import order per Ruff (isort via Ruff `I`).
