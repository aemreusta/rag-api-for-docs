classDiagram
    class CustomLLM {
        <<LlamaIndex>>
        +complete()
        +stream_complete()
    }
    
    class LLMProvider {
        <<Abstract>>
        +is_available() bool
        +complete(messages) CompletionResponse
        +stream_complete(messages) AsyncGenerator
    }
    
    class OpenRouterProvider {
        -timeout_seconds: int
        -model_name: str
        -logger: Logger
        +is_available() bool
        +complete(messages) CompletionResponse
        +stream_complete(messages) AsyncGenerator
    }
    
    class GroqProvider {
        -timeout_seconds: int
        -model_name: str
        -logger: Logger
        +is_available() bool
        +complete(messages) CompletionResponse
        +stream_complete(messages) AsyncGenerator
        +_retry_with_backoff(func, *args) Any
        +_convert_messages_to_groq_format(messages) list
        +_create_completion_response(response) CompletionResponse
        +_create_streaming_response(chunk) CompletionResponse
    }
    
    class OpenAIProvider {
        -timeout_seconds: int
        -model_name: str
        -logger: Logger
        +is_available() bool
        +complete(messages) CompletionResponse
        +stream_complete(messages) AsyncGenerator
    }
    
    class LocalProvider {
        -timeout_seconds: int
        -model_name: str
        -logger: Logger
        +is_available() bool
        +complete(messages) CompletionResponse
        +stream_complete(messages) AsyncGenerator
    }
    
    class LLMRouter {
        -_redis_client: Any
        -_providers: list[LLMProvider]
        -_available_providers: list[LLMProvider]
        -_logger: Any
        +logger: Any
        +__init__()
        +redis_client: Any
        +available_providers: list[LLMProvider]
        +metadata: LLMMetadata
        +_get_cache_key(provider, model, error_type) str
        +_is_provider_cached_as_failed(provider, error_type) bool
        +_cache_provider_failure(provider, error_type)
        +_classify_error(error) ErrorType
        +_should_trigger_fallback(error) bool
        +_try_provider(provider, messages) CompletionResponse
        +acomplete(messages) CompletionResponse
        +complete(messages) CompletionResponse
        +astream_complete(messages) AsyncGenerator
        +stream_complete(messages) AsyncGenerator
    }
    
    CustomLLM <|-- LLMRouter
    LLMProvider <|-- OpenRouterProvider
    LLMProvider <|-- GroqProvider
    LLMProvider <|-- OpenAIProvider
    LLMProvider <|-- LocalProvider
    LLMRouter o-- LLMProvider 