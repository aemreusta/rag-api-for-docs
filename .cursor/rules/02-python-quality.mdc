---
description: Python quality gate and static analysis guidance (Ruff, MyPy). Ensures type-safety, formatting, and defensive coding across Python files.
globs: **/*.py
alwaysApply: false
---
# Critical: Python Quality (Ruff & MyPy)

This is the most important rule. Generating code that passes our static analysis tools is mandatory. The following rules are based on recurring failures in our `pre-commit` checks.

## 1. The Golden Rule: Defensive Coding for `None` and `Any`

Almost all our `mypy` errors come from incorrectly handling values that could be `None` or are typed as `Any`. You MUST write defensive code.

### **A. Strict `None` Handling**

Before you use a variable in any operation (arithmetic, attribute access, passing to a function that expects a non-optional type), you **MUST** check if it is `None`.

```python
# BAD: This causes `Unsupported operand types` or `Item "None" has no attribute` errors
def process_data(value: int | None):
    return value + 5 # mypy error: value could be None

# GOOD: The Type Guard
def process_data(value: int | None):
    if value is None:
        # Handle the None case explicitly
        return 0
    # After the check, mypy knows `value` is an `int`
    return value + 5
```

### **B. Resolving `Any`**

Values from dictionaries (`.get()`) or untyped libraries are often `Any`. Do not pass these values around. Narrow the type as soon as possible.

```python
# BAD: `raw_data` is `Any`, so `mypy` can't validate `.get("name")`
def get_name(data: dict) -> str:
    raw_data = data.get("user") # `raw_data` is Any
    return raw_data.get("name") # mypy error: any? has no attribute "get"

# GOOD: Use `isinstance` to inform the type checker
def get_name(data: dict) -> str | None:
    raw_data = data.get("user")
    if isinstance(raw_data, dict):
        name = raw_data.get("name")
        if isinstance(name, str):
            return name
    return None
```

## 2. Common MyPy Errors and How to Fix Them

- **`[assignment]` / `[arg-type]` Errors**: The variable/parameter was defined as `str`, but you're trying to assign `str | None`. Fix the type definition to `str | None` or perform a `None` check before assigning/passing.
- **`[no-any-return]` Errors**: Your function promises to return a `Hospital`, but you are returning a value from a dictionary lookup which `mypy` sees as `Any`. Ensure the object you return is correctly typed before the `return` statement.
- **`[valid-type]` Error**: You used the keyword `any`. You meant to use `Any` from the `typing` module. **ALWAYS** `from typing import Any`.
- **`[dict-item]` Errors**: Your dictionary is typed as `dict[str, float]` but you are trying to assign a `None` value. Change the type to `dict[str, float | None]`.

## 3. Ruff Linting & Formatting (Repository-Enforced)

- All code MUST be formatted with `ruff format .` and pass `ruff check .` using the config in `pyproject.toml`.
- **Line length**: 100 characters (Ruff `E501`).
  - Break long function calls and argument lists across multiple lines.
  - Prefer multi-line over long one-liners.
  - Keep comments/docstrings wrapped to <= 100 characters.
- **Quoting**: Use double quotes (Ruff formatter default).
- **Imports**: Maintain import order compatible with Ruff (isort via Ruff `I`).
- If a line is close to 100 characters, wrap proactively to avoid `E501`.
- Avoid adding TODO comments; implement the change or create an issue instead.
- Write clean, idiomatic Python (f-strings, comprehensions when clear, explicit types for public APIs).

## 4. MyPy Configuration Alignment

- Match types and options configured in `pyproject.toml`.
- Use precise types for public functions and avoid `Any` in signatures.
- Prefer `TypedDict`, `Protocol`, and generics when modeling structured data.

@pyproject.toml
